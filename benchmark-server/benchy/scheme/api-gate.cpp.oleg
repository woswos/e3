/**********************************************************************************
benchy api for schemes that support gate operations

IMPORTANT NOTE: Please instantiate all objects in the heap memory, not stack memory
                For example use     Object* o = new Object();
                Don't use   Object* o;
                Please don't cout anything!
**********************************************************************************/

#include "base.h"
#include "gate.h"
#include <memory>

/*************************************/
/** Please include your scheme here **/
/*************************************/

// Oleg's scheme
struct Key { int k = 1; };

class CiphertextBit
{

    private:
        int x = 0;
	static Key key;

    public:
        CiphertextBit() {};

        CiphertextBit(std::string v): x(std::stoi(v)) {}
        std::string str() const { return std::to_string(x); }

        CiphertextBit nand(CiphertextBit b) const
        {
            CiphertextBit r;
            r.x = 1 & ~(x & b.x);
            return r;
        }

};

inline CiphertextBit gate_nand(CiphertextBit a, CiphertextBit b){ return a.nand(b); }
inline CiphertextBit gate_not(CiphertextBit a){ return gate_nand(a,a); }
inline CiphertextBit gate_and(CiphertextBit a, CiphertextBit b){ return gate_not(gate_nand(a,b)); }

/***********************/
/** GENERIC FUNCTIONS **/
/***********************/

// This function is called once in the beginning of the benchmark.
//      You can use this function to initilize required parameters
//      or pointers, etc.
void Scheme::Init(){


}

// This function is called whenever new keys are required. You don't need to
//      return anything but store the pointers to your key parameters by using
//      Scheme::StoreParameter(string key, typename pointer) function.
// This function accepts any type of pointers and internally casts to void pointer type.
// Later, you will be able to call the stored pointer by using
//      Scheme::GetParameter(string key) function. So, give it a meaningful key name.
// You can store as many pointers you want.
void Scheme::GenerateKeySet(){


}

// This function will be called for encrypting plaintext values. Please return a
//      void type pointer to the cipher text. You achieve this by casting your
//      existing pointer to the cipher text.
// You can get required keys and parameters by calling Scheme::GetParameter(string key)
//      function as mentioned previously. This function will return a void type pointer
//      and please cast this pointer to your reqired data type before utilizing.
void* Scheme::Encrypt(int plainText){


    CiphertextBit a(std::to_string(plainText));


    CiphertextBit* ptr = new CiphertextBit(a);


    return static_cast<void*>(ptr);

}


int Scheme::Decrypt(void* cipherText){

    CiphertextBit  *ptr = static_cast<CiphertextBit*>(cipherText);

    return std::stoi(ptr->str());
}

void Scheme::Cleanup(){
// remove_before_flight
}

/********************/
/** GATE FUNCTIONS **/
/********************/
// For gates, you will be provided coid pointers to cipher texts that was encrypted
//      by using the encrypt() function you defined above. Please cast provided void
//      pointers to your cipher text data type before using.
// You should return a void pointer to the result after completing the gate operation


// And gate
void* GateApi::EvalAnd(void *bitA, void *bitB){

    CiphertextBit  *bitAPtr = static_cast<CiphertextBit*>(bitA);
    CiphertextBit  *bitBPtr = static_cast<CiphertextBit*>(bitB);

    CiphertextBit c = gate_and(*bitAPtr, *bitBPtr);

    CiphertextBit* resultPtr = &c;

    return static_cast<void*>(resultPtr);
}

// Nand gate
void* GateApi::EvalNand(void *bitA, void *bitB){

    CiphertextBit  *bitAPtr = static_cast<CiphertextBit*>(bitA);
    CiphertextBit  *bitBPtr = static_cast<CiphertextBit*>(bitB);

    CiphertextBit c = gate_nand(*bitAPtr, *bitBPtr);

    CiphertextBit* resultPtr = &c;

    return static_cast<void*>(resultPtr);
}

// Not gate
void* GateApi::EvalNot(void *bitA){

    CiphertextBit  *bitAPtr = static_cast<CiphertextBit*>(bitA);

    CiphertextBit c = gate_not(*bitAPtr);

    CiphertextBit* resultPtr = &c;

    return static_cast<void*>(resultPtr);
}



/*************************************************/
/** Please don't modify the following functions **/
/*************************************************/
template <typename T>
void Scheme::StoreParameter(string key, T* pointer){

    void *ptr = static_cast<void*>(pointer);
    Scheme::parameters.insert({key, ptr});

}

void* Scheme::GetParameter(string key){

    return Scheme::parameters[key];
}
